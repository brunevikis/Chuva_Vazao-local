using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Threading;

namespace ChuvaVazaoTools
{
    class Gerar_Mapas_R
    {
        public static void Gerar_R(string path_Conj, System.IO.TextWriter logF)
        {

            DateTime data_Atual = DateTime.Today;
            var path_H = @"H:\Middle - Preço\Acompanhamento de Precipitação\";
            var path_Previsao = Path.Combine(path_H, "Previsao_Numerica");
            var path_CSV = Path.Combine(path_Conj, "Trabalho\\Uruguai\\Passo Sao Joao");
            var path_Acomph = @"H:\Middle - Preço\Acompanhamento de vazões\ACOMPH\1_historico\";
            var path_ModeloR = Path.Combine(path_Previsao, "Modelo_R");

            // Date of VE
            var runRev_Curr = ChuvaVazaoTools.Tools.Tools.GetCurrRev(data_Atual);
            var cv1 = runRev_Curr.revDate.AddDays(-1);

            var runRev = ChuvaVazaoTools.Tools.Tools.GetNextRev(data_Atual);
            var cv2 = runRev.revDate.AddDays(-1);

            if (File.Exists(Path.Combine(path_Conj, "error.log")))
            {
                File.Delete(Path.Combine(path_Conj, "error.log"));
            }

            try
            {

                //Last day of Acomph

                var dt_acomph = data_Atual;

                logF.WriteLine("Verificando Acomph");
                while (!File.Exists(Path.Combine(path_Acomph, dt_acomph.ToString("yyyy"), dt_acomph.ToString("MM_yyyy"), "ACOMPH_" + dt_acomph.ToString("dd-MM-yyyy") + ".xls")))
                {
                    dt_acomph = dt_acomph.AddDays(-1);
                }
                // dt_acomph = dt_acomph.AddDays(-1);
                //Check if exist funceme of Today

                var funceme = Directory.GetFiles(Path.Combine(@"H:\Middle - Preço\Acompanhamento de Precipitação\Previsao_Numerica\Modelo_R\funceme\", data_Atual.ToString("yyyyMM"), data_Atual.ToString("dd")));
                var funcemeFolder = Path.Combine(@"H:\Middle - Preço\Acompanhamento de Precipitação\Previsao_Numerica\Modelo_R\funceme\", data_Atual.ToString("yyyyMM"), data_Atual.ToString("dd"));

                logF.WriteLine("Verificando Funceme data atual");
                if (funceme.Length != 0)
                {
                    logF.WriteLine("Funceme Encontrado!");
                    //ultimo dia de atualização da previsão

                    StreamReader stream = new StreamReader(Path.Combine(path_CSV, "GEFS.csv"));
                    string dia = null;
                    string linha = null;
                    while ((linha = stream.ReadLine()) != null)
                    {
                        string[] coluna = linha.Split(';');
                        dia = coluna[0];

                    }
                    var last_day = Convert.ToDateTime(dia);
                    stream.Close();

                    logF.WriteLine("Tranferindo arquivos GEFS para Entrada");
                    //Verifca o GEFS ONS, caso existir copia para os arquivos de entrada 

                    var path_Dia = Path.Combine(path_Previsao, data_Atual.ToString("yyyyMM"), data_Atual.ToString("dd"));

                    var GEFS_NOAA = Path.Combine(path_Previsao, "Modelo_R\\GEFS00");

                    var path_ArqPrev = Path.Combine(path_Conj, "Arq_Entrada\\Previsao");

                    var GEFS_ONS = Directory.GetFiles(path_Dia, "GEFS_*").Where(x => x.EndsWith(".dat"));

                    if (GEFS_ONS != null)
                    {
                        //14 dias do GEFS ONS
                        foreach (var GEFS in GEFS_ONS)
                        {

                            File.Copy(GEFS, Path.Combine(path_ArqPrev, "GEFS", GEFS.Split('\\').Last()), true);
                        }

                        //15° dia do GEFS NOAA
                        var Ult_GEFS = Directory.GetFiles(Path.Combine(GEFS_NOAA, data_Atual.ToString("yyyyMM"), data_Atual.ToString("dd"))).Where(File => !GEFS_ONS.Any(x => File.EndsWith(x.Split('\\').Last(), StringComparison.OrdinalIgnoreCase)));

                        if (Ult_GEFS != null)
                        {
                            foreach (var Ult in Ult_GEFS)
                            {
                                File.Copy(Ult, Path.Combine(path_ArqPrev, "GEFS", Ult.Split('\\').Last()), true);
                            }

                        }
                    }
                    else
                    {
                        //Todos os dias do GEFS NOAA

                        var arqs_NOAA = Directory.GetFiles(Path.Combine(GEFS_NOAA, data_Atual.ToString("yyyyMM"), data_Atual.ToString("dd")));

                        foreach (var arq in arqs_NOAA)
                        {
                            File.Copy(arq, Path.Combine(path_ArqPrev, "GEFS", arq.Split('\\').Last()), true);
                        }
                    }
                    logF.WriteLine("Executando Script");
                    //executar_R(path_Conj, "prev_gfs_remvies_V2.R");
                    executar_R(path_Conj, "ons.R prev_gfs_remvies_V2.R");
                    executar_R(path_Conj, "convert_grade.R GEFS");


                    logF.WriteLine("Tranferindo arquivos ETA para Entrada");

                    //ETA 10 ONS dias 


                    var ETA_ONS = Directory.GetFiles(path_Dia, "ETA40_*").Where(x => x.EndsWith(".dat"));

                    if (ETA_ONS != null)
                    {
                        foreach (var ETA in ETA_ONS)
                        {

                            File.Copy(ETA, Path.Combine(path_ArqPrev, "ETA40", ETA.Split('\\').Last()), true);
                        }
                    }


                    logF.WriteLine("Executando Script");
                    executar_R(path_Conj, "ons.R prev_eta_remvies_V2.R");


                    executar_R(path_Conj, "ons.R Roda_Conjunto_V2.1.R");

                    //PowerShellExecutor t = new PowerShellExecutor();


                    //t.ExecutaPowerShell();



                    //ECWMF
                    logF.WriteLine("Tranferindo arquivos ECWMF para Entrada");

                    var ECMWFs = Directory.GetFiles(Path.Combine(path_ModeloR, "ECMWF00", data_Atual.ToString("yyyyMM"), data_Atual.ToString("dd"))).Where(x => x.EndsWith(".dat"));

                    if (ECMWFs != null)
                    {
                        foreach (var ECMWF in ECMWFs)
                        {

                            File.Copy(ECMWF, Path.Combine(path_ArqPrev, "ECMWF", ECMWF.Split('\\').Last()), true);
                        }
                    }

                    logF.WriteLine("Executando Script");
                    executar_R(path_Conj, "convert_grade.R ECMWF ETA40");


                    //gfs
                    logF.WriteLine("Tranferindo arquivos GFS para Entrada");
                    var GFSs = Directory.GetFiles(Path.Combine(path_ModeloR, "GFS00", data_Atual.ToString("yyyyMM"), data_Atual.ToString("dd"))).Where(x => x.EndsWith(".dat"));

                    if (GFSs != null)
                    {
                        foreach (var GFS in GFSs)
                        {

                            File.Copy(GFS, Path.Combine(path_ArqPrev, "GFS", GFS.Split('\\').Last()), true);
                        }
                    }

                    logF.WriteLine("Executando Script");
                    executar_R(path_Conj, "convert_grade.R GFS GEFS");

                    // Verifica Merge, caso não tenha usa o funceme
                    logF.WriteLine("Verifica Funceme/Merge");
                    DateTime dt_func = data_Atual;
                    while (dt_func != dt_acomph)
                    {
                        var Merge = Directory.GetFiles(Path.Combine(path_ModeloR, "merge", dt_func.ToString("yyyyMM"), dt_func.ToString("dd"))).Where(x => x.EndsWith(".dat"));

                        if (Merge.Count() > 0)
                        {
                            foreach (var arq in Merge)
                            {
                                File.Copy(arq, Path.Combine(path_ArqPrev, "Funceme", arq.Split('\\').Last().Replace('p' + dt_func.ToString("ddMMyy"), dt_func.ToString("ddMMyy"))), true);
                            }
                        }
                        else
                        {
                            var Func = Directory.GetFiles(Path.Combine(path_ModeloR, "funceme", dt_func.ToString("yyyyMM"), dt_func.ToString("dd"))).Where(x => x.EndsWith(".dat"));
                            foreach (var arq in Func)
                            {
                                File.Copy(arq, Path.Combine(path_ArqPrev, "Funceme", arq.Split('\\').Last().Replace('p' + dt_func.ToString("ddMMyy"), dt_func.ToString("ddMMyy"))), true);
                            }
                        }
                        dt_func = dt_func.AddDays(-1);
                    }

                    logF.WriteLine("Executando Script");
                    executar_R(path_Conj, "convert_grade.R Funceme ETA40");

                    executar_R(path_Conj, "vies_ve.R " + cv1.ToString("dd/MM/yy") + " " + cv2.ToString("dd/MM/yy"));

                    //Organização das Rodada para rvx+1

                    logF.WriteLine("Criando Pastas RVX+1");

                    var path_ArqSaida = Path.Combine(path_Conj, "Arq_Saida");


                    var vies_cv1 = Directory.GetFiles(Path.Combine(path_ArqSaida, "Vies." + cv1.ToString("dd-MM")));
                    var vies_cv2 = Directory.GetFiles(Path.Combine(path_ArqSaida, "Vies." + cv2.ToString("dd-MM")));

                    rvx1(path_Conj, "ECMWF", "CV_EURO", vies_cv1, vies_cv2);
                    logF.WriteLine("CV_EURO Criada!");

                    rvx1(path_Conj, "GEFS", "CV_VIES_VE", vies_cv1, vies_cv2);
                    logF.WriteLine("CV_VIES_VE Criada!");

                    rvx1(path_Conj, "GFS", "CV_GFS", vies_cv1, vies_cv2);
                    logF.WriteLine("CV_GFS Criada!");



                    //Organização das Rodada para rvx+2

                    logF.WriteLine("Criando Pastas RVX+2");

                    rvx2(path_Conj, "ECMWF", "CV2_EURO", vies_cv2);
                    MCP(cv2, Path.Combine(path_Conj, "CV2_EURO"), path_ModeloR);
                    logF.WriteLine("CV2_EURO Criada!");

                    rvx2(path_Conj, "GEFS", "CV2_GEFS", vies_cv2);
                    MCP(cv2, Path.Combine(path_Conj, "CV2_GEFS"), path_ModeloR);
                    logF.WriteLine("CV2_GEFS Criada!");

                    rvx2(path_Conj, "GFS", "CV2_GFS", vies_cv2);
                    MCP(cv2, Path.Combine(path_Conj, "CV2_GFS"), path_ModeloR);
                    logF.WriteLine("CV2_GFS Criada!");

                    //CV_FUNC 
                    //Remoção de vies a partir do dia atual, completando com MCP se necessário
                    logF.WriteLine("Criando Pasta CV_FUNC");

                    var arqs_PMEDIA = Directory.GetFiles(path_ArqSaida, "*.dat");

                    foreach (var arq in arqs_PMEDIA)
                    {
                        var cv_func = Path.Combine(path_Conj, "CV_FUNC");

                        Directory.CreateDirectory(cv_func);

                        File.Copy(arq, Path.Combine(cv_func, arq.Split('\\').Last()), true);
                    }
                    MCP_FUNC(cv1, Path.Combine(path_Conj, "CV_FUNC"), path_ModeloR);
                    logF.WriteLine("CV_FUNC Criada!");

                    //Completa com Funceme se não tiver acomph referente a data

                    if (data_Atual != dt_acomph)
                    {
                        logF.WriteLine("Acomph desatualizado, renoamendo arquivos");
                        var dirs = Directory.GetDirectories(path_Conj).Where(x => x.Split('\\').Last().StartsWith("CV"));
                        var arq_funceme = Directory.GetFiles(Path.Combine(path_ArqSaida, "Funceme"));

                        foreach (var arq in arq_funceme)
                        {
                            foreach (var dir in dirs)
                            {

                                File.Copy(arq, Path.Combine(dir, arq.Split('\\').Last()), true);
                                Atualiza_DT(dir, dt_acomph);
                            }
                        }
                    }


                }



                logF.WriteLine("Mapas Gerados com Sucesso!");

            }
            catch (Exception a)
            {
                var log_C = Path.Combine(path_Conj, "error.log");

                File.Create(log_C);
                File.WriteAllText(log_C, a.ToString());
                logF.WriteLine("Erro ao Gerar Mapas");
            }


        }

        internal static void Atualiza_DT(string dir, DateTime dt_acomph)
        {


            var arqs = Directory.GetFiles(dir);

            foreach (var arq in arqs)
            {
                var nome = arq.Split('\\').Last();

                var fim_nome = nome.Split('.').First().Split('a').Last();

                var nome_Final = "p" + dt_acomph.ToString("ddMMyy") + "a" + fim_nome + ".dat";

                File.Move(arq, Path.Combine(dir, nome_Final));

            }
        }

        internal static void rvx1(string path_Conj, string modelo, string nome_path, string[] vies_cv1, string[] vies_cv2)
        {

            var path_cv = Path.Combine(path_Conj, nome_path);
            var path_ArqSaida = Path.Combine(path_Conj, "Arq_Saida");
            Directory.CreateDirectory(path_cv);
            var out_Modelo = Directory.GetFiles(Path.Combine(path_ArqSaida, modelo));
            var Modelo1 = out_Modelo.Where(File => !vies_cv1.Any(x => File.EndsWith(x.Split('\\').Last(), StringComparison.OrdinalIgnoreCase)));
            var Modelo2 = Modelo1.Where(File => !vies_cv2.Any(x => File.EndsWith(x.Split('\\').Last(), StringComparison.OrdinalIgnoreCase)));

            foreach (var arq in Modelo2)
            {
                File.Copy(arq, Path.Combine(path_cv, arq.Split('\\').Last()), true);
            }
            foreach (var arq_CV in vies_cv1)
            {
                File.Copy(arq_CV, Path.Combine(path_cv, arq_CV.Split('\\').Last()), true);
            }

        }

        internal static void rvx2(string path_Conj, string modelo, string nome_path, string[] vies_cv2)
        {

            var path_cv = Path.Combine(path_Conj, nome_path);
            var path_ArqSaida = Path.Combine(path_Conj, "Arq_Saida");
            Directory.CreateDirectory(path_cv);



            var out_Modelo = Directory.GetFiles(Path.Combine(path_ArqSaida, modelo));

            var Modelo2 = out_Modelo.Where(File => !vies_cv2.Any(x => File.EndsWith(x.Split('\\').Last(), StringComparison.OrdinalIgnoreCase)));

            foreach (var arq in Modelo2)
            {
                File.Copy(arq, Path.Combine(path_cv, arq.Split('\\').Last()), true);
            }

            if (modelo == "ECMWF")
            {
                var arqs_GEFS = Directory.GetFiles(Path.Combine(path_ArqSaida, "GEFS"));

                var Modelo3 = arqs_GEFS.Where(File => !vies_cv2.Any(x => File.EndsWith(x.Split('\\').Last(), StringComparison.OrdinalIgnoreCase)));
                var arqs_GEFS_EURO = Modelo3.Where(File => !Modelo2.Any(x => File.EndsWith(x.Split('\\').Last(), StringComparison.OrdinalIgnoreCase)));

                foreach (var arq_Euro in arqs_GEFS_EURO)
                {
                    File.Copy(arq_Euro, Path.Combine(path_cv, arq_Euro.Split('\\').Last()), true);
                }
            }

            foreach (var arq_CV in vies_cv2)
            {
                File.Copy(arq_CV, Path.Combine(path_cv, arq_CV.Split('\\').Last()), true);
            }

        }

        internal static void MCP(DateTime cv, string path, string Modelo_R)
        {
            var arqs = Directory.GetFiles(path);
            for (int i = 1; i <= 12; i++)
            {
                var data = cv.AddDays(i);
                if (!File.Exists(Path.Combine(path, "p" + DateTime.Today.ToString("ddMMyy") + "a" + data.ToString("ddMMyy") + ".dat")))
                {
                    File.Copy(Path.Combine(Modelo_R, "MCP", "prec_mct1318_" + i.ToString().PadLeft(2, '0') + ".dat"), Path.Combine(path, "p" + DateTime.Today.ToString("ddMMyy") + "a" + data.ToString("ddMMyy") + ".dat"), true);

                }
            }
        }

        internal static void MCP_FUNC(DateTime cv, string path, string Modelo_R)
        {
            var arqs = Directory.GetFiles(path);
            for (int i = 1; i <= 9; i++)
            {
                var data = cv.AddDays(i);
                if (!File.Exists(Path.Combine(path, "p" + DateTime.Today.ToString("ddMMyy") + "a" + data.ToString("ddMMyy") + ".dat")) && !File.Exists(Path.Combine(path, "PMEDIA_p" + DateTime.Today.ToString("ddMMyy") + "a" + data.ToString("ddMMyy") + ".dat")))
                {
                    File.Copy(Path.Combine(Modelo_R, "MCP", "prec_mct1318_" + i.ToString().PadLeft(2, '0') + ".dat"), Path.Combine(path, "p" + DateTime.Today.ToString("ddMMyy") + "a" + data.ToString("ddMMyy") + ".dat"), true);

                }
            }
        }


        static void executar_R(string path, string Comando)
        {

            //string executar = @"/C " + "H: & cd " + txtCaminho.Text + "& bat.bat";


            //string executar = @"/c " + "N: & cd Middle - Preço\\16_Chuva_Vazao\\Conjunto-PastasEArquivos/ & bat.bat";


            var letra_Dir = path.Split('\\').First();
            var path_Scripts = @"P:\Pedro\remoção_R\scripts\";
            string executar = @"/C " + letra_Dir + " & cd " + path + @" & Rscript.exe " + path_Scripts + Comando;


            System.Diagnostics.Process.Start("cmd.exe", executar).WaitForExit(600000);



        }





    }
    

}



